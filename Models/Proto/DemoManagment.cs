// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DemoManagment.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Demo.Services.Grpc {

  /// <summary>Holder for reflection information generated from DemoManagment.proto</summary>
  public static partial class DemoManagmentReflection {

    #region Descriptor
    /// <summary>File descriptor for DemoManagment.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DemoManagmentReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNEZW1vTWFuYWdtZW50LnByb3RvEhJkZW1vLnNlcnZpY2VzLmdycGMaD0Rl",
            "bW9UeXBlcy5wcm90byJBChtMb29rdXBOZXh0RGVtb1JlY29yZFJlcXVlc3QS",
            "DgoGdXNlcklkGAEgASgDEhIKCmxvb2t1cExhbmcYAiABKAQiQAohR2V0RGVt",
            "b1JlY29yZHNNZXRhZGF0YUxpc3RSZXF1ZXN0EgwKBHNraXAYASABKAQSDQoF",
            "bGltaXQYAiABKA0iLQoZR2V0TWV0YWRhdGFDb250ZW50UmVxdWVzdBIQCghy",
            "ZWNvcmRJZBgBIAEoAyJnChRJbnNlcnRJbnRlcmltUmVxdWVzdBIOCgZ1c2Vy",
            "SWQYASABKAMSEAoIcmVjb3JkSWQYAiABKAMSLQoEZGF0YRgDIAEoCzIfLmRl",
            "bW8uc2VydmljZXMuZ3JwYy5EZW1vQ29udGVudCI1ChFSZW1vdmVMb2NrUmVx",
            "dWVzdBIOCgZ1c2VySWQYASABKAMSEAoIcmVjb3JkSWQYAiABKAMy4gQKDkRl",
            "bW9NYW5hZ2VtZW50Ek4KEEluc2VydERlbW9SZWNvcmQSHi5kZW1vLnNlcnZp",
            "Y2VzLmdycGMuRGVtb1JlY29yZBoYLmRlbW8uc2VydmljZXMuZ3JwYy5Wb2lk",
            "IgASgAEKFUdldFJlY29yZE1ldGFkYXRhTGlzdBI1LmRlbW8uc2VydmljZXMu",
            "Z3JwYy5HZXREZW1vUmVjb3Jkc01ldGFkYXRhTGlzdFJlcXVlc3QaLi5kZW1v",
            "LnNlcnZpY2VzLmdycGMuRGVtb1JlY29yZE1ldGFkYXRhU2VxdWVuY2UiABJp",
            "ChRMb29rdXBOZXh0RGVtb1JlY29yZBIvLmRlbW8uc2VydmljZXMuZ3JwYy5M",
            "b29rdXBOZXh0RGVtb1JlY29yZFJlcXVlc3QaHi5kZW1vLnNlcnZpY2VzLmdy",
            "cGMuRGVtb1JlY29yZCIAElUKDUluc2VydEludGVyaW0SKC5kZW1vLnNlcnZp",
            "Y2VzLmdycGMuSW5zZXJ0SW50ZXJpbVJlcXVlc3QaGC5kZW1vLnNlcnZpY2Vz",
            "LmdycGMuVm9pZCIAEk8KClJlbW92ZUxvY2sSJS5kZW1vLnNlcnZpY2VzLmdy",
            "cGMuUmVtb3ZlTG9ja1JlcXVlc3QaGC5kZW1vLnNlcnZpY2VzLmdycGMuVm9p",
            "ZCIAEmoKEkdldE1ldGFkYXRhQ29udGVudBItLmRlbW8uc2VydmljZXMuZ3Jw",
            "Yy5HZXRNZXRhZGF0YUNvbnRlbnRSZXF1ZXN0GiMuZGVtby5zZXJ2aWNlcy5n",
            "cnBjLk1ldGFkYXRhQ29udGVudCIAQgJIAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Demo.Services.Grpc.DemoTypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Demo.Services.Grpc.LookupNextDemoRecordRequest), global::Demo.Services.Grpc.LookupNextDemoRecordRequest.Parser, new[]{ "UserId", "LookupLang" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Demo.Services.Grpc.GetDemoRecordsMetadataListRequest), global::Demo.Services.Grpc.GetDemoRecordsMetadataListRequest.Parser, new[]{ "Skip", "Limit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Demo.Services.Grpc.GetMetadataContentRequest), global::Demo.Services.Grpc.GetMetadataContentRequest.Parser, new[]{ "RecordId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Demo.Services.Grpc.InsertInterimRequest), global::Demo.Services.Grpc.InsertInterimRequest.Parser, new[]{ "UserId", "RecordId", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Demo.Services.Grpc.RemoveLockRequest), global::Demo.Services.Grpc.RemoveLockRequest.Parser, new[]{ "UserId", "RecordId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///--------------------------------------------------------------------------------
  //// DemoRecord related data transfer objects
  ///--------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class LookupNextDemoRecordRequest : pb::IMessage<LookupNextDemoRecordRequest> {
    private static readonly pb::MessageParser<LookupNextDemoRecordRequest> _parser = new pb::MessageParser<LookupNextDemoRecordRequest>(() => new LookupNextDemoRecordRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LookupNextDemoRecordRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Demo.Services.Grpc.DemoManagmentReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LookupNextDemoRecordRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LookupNextDemoRecordRequest(LookupNextDemoRecordRequest other) : this() {
      userId_ = other.userId_;
      lookupLang_ = other.lookupLang_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LookupNextDemoRecordRequest Clone() {
      return new LookupNextDemoRecordRequest(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "lookupLang" field.</summary>
    public const int LookupLangFieldNumber = 2;
    private ulong lookupLang_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LookupLang {
      get { return lookupLang_; }
      set {
        lookupLang_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LookupNextDemoRecordRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LookupNextDemoRecordRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (LookupLang != other.LookupLang) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (LookupLang != 0UL) hash ^= LookupLang.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (LookupLang != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(LookupLang);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (LookupLang != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LookupLang);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LookupNextDemoRecordRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.LookupLang != 0UL) {
        LookupLang = other.LookupLang;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            LookupLang = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetDemoRecordsMetadataListRequest : pb::IMessage<GetDemoRecordsMetadataListRequest> {
    private static readonly pb::MessageParser<GetDemoRecordsMetadataListRequest> _parser = new pb::MessageParser<GetDemoRecordsMetadataListRequest>(() => new GetDemoRecordsMetadataListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDemoRecordsMetadataListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Demo.Services.Grpc.DemoManagmentReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDemoRecordsMetadataListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDemoRecordsMetadataListRequest(GetDemoRecordsMetadataListRequest other) : this() {
      skip_ = other.skip_;
      limit_ = other.limit_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDemoRecordsMetadataListRequest Clone() {
      return new GetDemoRecordsMetadataListRequest(this);
    }

    /// <summary>Field number for the "skip" field.</summary>
    public const int SkipFieldNumber = 1;
    private ulong skip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Skip {
      get { return skip_; }
      set {
        skip_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 2;
    private uint limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDemoRecordsMetadataListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDemoRecordsMetadataListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Skip != other.Skip) return false;
      if (Limit != other.Limit) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Skip != 0UL) hash ^= Skip.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Skip != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Skip);
      }
      if (Limit != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Limit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Skip != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Skip);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Limit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDemoRecordsMetadataListRequest other) {
      if (other == null) {
        return;
      }
      if (other.Skip != 0UL) {
        Skip = other.Skip;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Skip = input.ReadUInt64();
            break;
          }
          case 16: {
            Limit = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetMetadataContentRequest : pb::IMessage<GetMetadataContentRequest> {
    private static readonly pb::MessageParser<GetMetadataContentRequest> _parser = new pb::MessageParser<GetMetadataContentRequest>(() => new GetMetadataContentRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMetadataContentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Demo.Services.Grpc.DemoManagmentReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMetadataContentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMetadataContentRequest(GetMetadataContentRequest other) : this() {
      recordId_ = other.recordId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMetadataContentRequest Clone() {
      return new GetMetadataContentRequest(this);
    }

    /// <summary>Field number for the "recordId" field.</summary>
    public const int RecordIdFieldNumber = 1;
    private long recordId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RecordId {
      get { return recordId_; }
      set {
        recordId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMetadataContentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMetadataContentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecordId != other.RecordId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecordId != 0L) hash ^= RecordId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecordId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RecordId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecordId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMetadataContentRequest other) {
      if (other == null) {
        return;
      }
      if (other.RecordId != 0L) {
        RecordId = other.RecordId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RecordId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///-------------------------------------------------------------------------------------------------
  //// Interim related data transfer objects
  ///-------------------------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class InsertInterimRequest : pb::IMessage<InsertInterimRequest> {
    private static readonly pb::MessageParser<InsertInterimRequest> _parser = new pb::MessageParser<InsertInterimRequest>(() => new InsertInterimRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsertInterimRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Demo.Services.Grpc.DemoManagmentReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertInterimRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertInterimRequest(InsertInterimRequest other) : this() {
      userId_ = other.userId_;
      recordId_ = other.recordId_;
      Data = other.data_ != null ? other.Data.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertInterimRequest Clone() {
      return new InsertInterimRequest(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "recordId" field.</summary>
    public const int RecordIdFieldNumber = 2;
    private long recordId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RecordId {
      get { return recordId_; }
      set {
        recordId_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private global::Demo.Services.Grpc.DemoContent data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Demo.Services.Grpc.DemoContent Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsertInterimRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsertInterimRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (RecordId != other.RecordId) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (RecordId != 0L) hash ^= RecordId.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (RecordId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RecordId);
      }
      if (data_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (RecordId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecordId);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsertInterimRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.RecordId != 0L) {
        RecordId = other.RecordId;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::Demo.Services.Grpc.DemoContent();
        }
        Data.MergeFrom(other.Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            RecordId = input.ReadInt64();
            break;
          }
          case 26: {
            if (data_ == null) {
              data_ = new global::Demo.Services.Grpc.DemoContent();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///-------------------------------------------------------------------------------------------------
  //// Lock related data transfer objects
  ///-------------------------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class RemoveLockRequest : pb::IMessage<RemoveLockRequest> {
    private static readonly pb::MessageParser<RemoveLockRequest> _parser = new pb::MessageParser<RemoveLockRequest>(() => new RemoveLockRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveLockRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Demo.Services.Grpc.DemoManagmentReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveLockRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveLockRequest(RemoveLockRequest other) : this() {
      userId_ = other.userId_;
      recordId_ = other.recordId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveLockRequest Clone() {
      return new RemoveLockRequest(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "recordId" field.</summary>
    public const int RecordIdFieldNumber = 2;
    private long recordId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RecordId {
      get { return recordId_; }
      set {
        recordId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveLockRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveLockRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (RecordId != other.RecordId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (RecordId != 0L) hash ^= RecordId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (RecordId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RecordId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (RecordId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecordId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveLockRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.RecordId != 0L) {
        RecordId = other.RecordId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            RecordId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
