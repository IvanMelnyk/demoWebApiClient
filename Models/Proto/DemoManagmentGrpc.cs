// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: DemoManagment.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Demo.Services.Grpc {
  /// <summary>
  ///-------------------------------------------------------------------------------------------------
  //// DemoManagement
  ///-------------------------------------------------------------------------------------------------
  /// </summary>
  public static partial class DemoManagement
  {
    static readonly string __ServiceName = "demo.services.grpc.DemoManagement";

    static readonly grpc::Marshaller<global::Demo.Services.Grpc.DemoRecord> __Marshaller_DemoRecord = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Demo.Services.Grpc.DemoRecord.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Demo.Services.Grpc.Void> __Marshaller_Void = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Demo.Services.Grpc.Void.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Demo.Services.Grpc.GetDemoRecordsMetadataListRequest> __Marshaller_GetDemoRecordsMetadataListRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Demo.Services.Grpc.GetDemoRecordsMetadataListRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Demo.Services.Grpc.DemoRecordMetadataSequence> __Marshaller_DemoRecordMetadataSequence = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Demo.Services.Grpc.DemoRecordMetadataSequence.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Demo.Services.Grpc.LookupNextDemoRecordRequest> __Marshaller_LookupNextDemoRecordRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Demo.Services.Grpc.LookupNextDemoRecordRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Demo.Services.Grpc.InsertInterimRequest> __Marshaller_InsertInterimRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Demo.Services.Grpc.InsertInterimRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Demo.Services.Grpc.RemoveLockRequest> __Marshaller_RemoveLockRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Demo.Services.Grpc.RemoveLockRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Demo.Services.Grpc.GetMetadataContentRequest> __Marshaller_GetMetadataContentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Demo.Services.Grpc.GetMetadataContentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Demo.Services.Grpc.MetadataContent> __Marshaller_MetadataContent = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Demo.Services.Grpc.MetadataContent.Parser.ParseFrom);

    static readonly grpc::Method<global::Demo.Services.Grpc.DemoRecord, global::Demo.Services.Grpc.Void> __Method_InsertDemoRecord = new grpc::Method<global::Demo.Services.Grpc.DemoRecord, global::Demo.Services.Grpc.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InsertDemoRecord",
        __Marshaller_DemoRecord,
        __Marshaller_Void);

    static readonly grpc::Method<global::Demo.Services.Grpc.GetDemoRecordsMetadataListRequest, global::Demo.Services.Grpc.DemoRecordMetadataSequence> __Method_GetRecordMetadataList = new grpc::Method<global::Demo.Services.Grpc.GetDemoRecordsMetadataListRequest, global::Demo.Services.Grpc.DemoRecordMetadataSequence>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRecordMetadataList",
        __Marshaller_GetDemoRecordsMetadataListRequest,
        __Marshaller_DemoRecordMetadataSequence);

    static readonly grpc::Method<global::Demo.Services.Grpc.LookupNextDemoRecordRequest, global::Demo.Services.Grpc.DemoRecord> __Method_LookupNextDemoRecord = new grpc::Method<global::Demo.Services.Grpc.LookupNextDemoRecordRequest, global::Demo.Services.Grpc.DemoRecord>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LookupNextDemoRecord",
        __Marshaller_LookupNextDemoRecordRequest,
        __Marshaller_DemoRecord);

    static readonly grpc::Method<global::Demo.Services.Grpc.InsertInterimRequest, global::Demo.Services.Grpc.Void> __Method_InsertInterim = new grpc::Method<global::Demo.Services.Grpc.InsertInterimRequest, global::Demo.Services.Grpc.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InsertInterim",
        __Marshaller_InsertInterimRequest,
        __Marshaller_Void);

    static readonly grpc::Method<global::Demo.Services.Grpc.RemoveLockRequest, global::Demo.Services.Grpc.Void> __Method_RemoveLock = new grpc::Method<global::Demo.Services.Grpc.RemoveLockRequest, global::Demo.Services.Grpc.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveLock",
        __Marshaller_RemoveLockRequest,
        __Marshaller_Void);

    static readonly grpc::Method<global::Demo.Services.Grpc.GetMetadataContentRequest, global::Demo.Services.Grpc.MetadataContent> __Method_GetMetadataContent = new grpc::Method<global::Demo.Services.Grpc.GetMetadataContentRequest, global::Demo.Services.Grpc.MetadataContent>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMetadataContent",
        __Marshaller_GetMetadataContentRequest,
        __Marshaller_MetadataContent);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Demo.Services.Grpc.DemoManagmentReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DemoManagement</summary>
    public abstract partial class DemoManagementBase
    {
      /// <summary>
      //// DemoRecord's related methods
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Demo.Services.Grpc.Void> InsertDemoRecord(global::Demo.Services.Grpc.DemoRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Demo.Services.Grpc.DemoRecordMetadataSequence> GetRecordMetadataList(global::Demo.Services.Grpc.GetDemoRecordsMetadataListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Demo.Services.Grpc.DemoRecord> LookupNextDemoRecord(global::Demo.Services.Grpc.LookupNextDemoRecordRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// Interim's related methods
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Demo.Services.Grpc.Void> InsertInterim(global::Demo.Services.Grpc.InsertInterimRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lock's related methods
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Demo.Services.Grpc.Void> RemoveLock(global::Demo.Services.Grpc.RemoveLockRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Metadata getter method
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Demo.Services.Grpc.MetadataContent> GetMetadataContent(global::Demo.Services.Grpc.GetMetadataContentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DemoManagement</summary>
    public partial class DemoManagementClient : grpc::ClientBase<DemoManagementClient>
    {
      /// <summary>Creates a new client for DemoManagement</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DemoManagementClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DemoManagement that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DemoManagementClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DemoManagementClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DemoManagementClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      //// DemoRecord's related methods
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Demo.Services.Grpc.Void InsertDemoRecord(global::Demo.Services.Grpc.DemoRecord request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return InsertDemoRecord(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// DemoRecord's related methods
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Demo.Services.Grpc.Void InsertDemoRecord(global::Demo.Services.Grpc.DemoRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InsertDemoRecord, null, options, request);
      }
      /// <summary>
      //// DemoRecord's related methods
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Demo.Services.Grpc.Void> InsertDemoRecordAsync(global::Demo.Services.Grpc.DemoRecord request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return InsertDemoRecordAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// DemoRecord's related methods
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Demo.Services.Grpc.Void> InsertDemoRecordAsync(global::Demo.Services.Grpc.DemoRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InsertDemoRecord, null, options, request);
      }
      public virtual global::Demo.Services.Grpc.DemoRecordMetadataSequence GetRecordMetadataList(global::Demo.Services.Grpc.GetDemoRecordsMetadataListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetRecordMetadataList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Demo.Services.Grpc.DemoRecordMetadataSequence GetRecordMetadataList(global::Demo.Services.Grpc.GetDemoRecordsMetadataListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRecordMetadataList, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Demo.Services.Grpc.DemoRecordMetadataSequence> GetRecordMetadataListAsync(global::Demo.Services.Grpc.GetDemoRecordsMetadataListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetRecordMetadataListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Demo.Services.Grpc.DemoRecordMetadataSequence> GetRecordMetadataListAsync(global::Demo.Services.Grpc.GetDemoRecordsMetadataListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRecordMetadataList, null, options, request);
      }
      public virtual global::Demo.Services.Grpc.DemoRecord LookupNextDemoRecord(global::Demo.Services.Grpc.LookupNextDemoRecordRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LookupNextDemoRecord(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Demo.Services.Grpc.DemoRecord LookupNextDemoRecord(global::Demo.Services.Grpc.LookupNextDemoRecordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LookupNextDemoRecord, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Demo.Services.Grpc.DemoRecord> LookupNextDemoRecordAsync(global::Demo.Services.Grpc.LookupNextDemoRecordRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LookupNextDemoRecordAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Demo.Services.Grpc.DemoRecord> LookupNextDemoRecordAsync(global::Demo.Services.Grpc.LookupNextDemoRecordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LookupNextDemoRecord, null, options, request);
      }
      /// <summary>
      //// Interim's related methods
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Demo.Services.Grpc.Void InsertInterim(global::Demo.Services.Grpc.InsertInterimRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return InsertInterim(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// Interim's related methods
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Demo.Services.Grpc.Void InsertInterim(global::Demo.Services.Grpc.InsertInterimRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InsertInterim, null, options, request);
      }
      /// <summary>
      //// Interim's related methods
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Demo.Services.Grpc.Void> InsertInterimAsync(global::Demo.Services.Grpc.InsertInterimRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return InsertInterimAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// Interim's related methods
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Demo.Services.Grpc.Void> InsertInterimAsync(global::Demo.Services.Grpc.InsertInterimRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InsertInterim, null, options, request);
      }
      /// <summary>
      /// Lock's related methods
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Demo.Services.Grpc.Void RemoveLock(global::Demo.Services.Grpc.RemoveLockRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RemoveLock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lock's related methods
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Demo.Services.Grpc.Void RemoveLock(global::Demo.Services.Grpc.RemoveLockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveLock, null, options, request);
      }
      /// <summary>
      /// Lock's related methods
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Demo.Services.Grpc.Void> RemoveLockAsync(global::Demo.Services.Grpc.RemoveLockRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RemoveLockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lock's related methods
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Demo.Services.Grpc.Void> RemoveLockAsync(global::Demo.Services.Grpc.RemoveLockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveLock, null, options, request);
      }
      /// <summary>
      /// Metadata getter method
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Demo.Services.Grpc.MetadataContent GetMetadataContent(global::Demo.Services.Grpc.GetMetadataContentRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetMetadataContent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Metadata getter method
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Demo.Services.Grpc.MetadataContent GetMetadataContent(global::Demo.Services.Grpc.GetMetadataContentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMetadataContent, null, options, request);
      }
      /// <summary>
      /// Metadata getter method
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Demo.Services.Grpc.MetadataContent> GetMetadataContentAsync(global::Demo.Services.Grpc.GetMetadataContentRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetMetadataContentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Metadata getter method
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Demo.Services.Grpc.MetadataContent> GetMetadataContentAsync(global::Demo.Services.Grpc.GetMetadataContentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMetadataContent, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DemoManagementClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DemoManagementClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DemoManagementBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_InsertDemoRecord, serviceImpl.InsertDemoRecord)
          .AddMethod(__Method_GetRecordMetadataList, serviceImpl.GetRecordMetadataList)
          .AddMethod(__Method_LookupNextDemoRecord, serviceImpl.LookupNextDemoRecord)
          .AddMethod(__Method_InsertInterim, serviceImpl.InsertInterim)
          .AddMethod(__Method_RemoveLock, serviceImpl.RemoveLock)
          .AddMethod(__Method_GetMetadataContent, serviceImpl.GetMetadataContent).Build();
    }

  }
}
#endregion
